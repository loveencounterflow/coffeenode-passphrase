// Generated by CoffeeScript 1.7.1
(function() {
  var bits, digits, idx, last_word_idx, n, njs_fs, njs_path, route, word, words, _i, _j;

  njs_fs = require('fs');

  njs_path = require('path');

  route = njs_path.join(__dirname, '../data/german.txt');

  words = (njs_fs.readFileSync(route, {
    encoding: 'utf-8'
  })).split('\n');

  words = (function() {
    var _i, _len, _results;
    _results = [];
    for (_i = 0, _len = words.length; _i < _len; _i++) {
      word = words[_i];
      _results.push(word.trim());
    }
    return _results;
  })();

  words = (function() {
    var _i, _len, _results;
    _results = [];
    for (_i = 0, _len = words.length; _i < _len; _i++) {
      word = words[_i];
      if (word.length > 0) {
        _results.push(word);
      }
    }
    return _results;
  })();

  last_word_idx = words.length - 1;

  digits = '0123456789';

  this._get_random_integer = function(max) {
    return Math.floor(Math.random() * (max + 1));
  };

  this._get_random_digits = function(max) {
    var idx;
    return ((function() {
      var _i, _results;
      _results = [];
      for (idx = _i = 0; _i < 3; idx = ++_i) {
        _results.push(digits[this._get_random_integer(9)]);
      }
      return _results;
    }).call(this)).join('');
  };

  this.get_passphrase = function(length, separator) {
    var R, idx, insertion_idx_0, insertion_idx_1, seen_words, _i;
    if (length == null) {
      length = 5;
    }
    if (separator == null) {
      separator = '-';
    }
    R = [];
    seen_words = {};
    insertion_idx_0 = this._get_random_integer(length - 1);
    while (true) {
      insertion_idx_1 = this._get_random_integer(length - 1);
      if (insertion_idx_1 !== insertion_idx_0) {
        break;
      }
    }
    for (idx = _i = 0; 0 <= length ? _i < length : _i > length; idx = 0 <= length ? ++_i : --_i) {
      while (true) {
        word = words[this._get_random_integer(last_word_idx)];
        if (seen_words[word] != null) {
          continue;
        }
        seen_words[word] = 1;
        break;
      }
      R.push(word);
      if (idx === insertion_idx_0) {
        R.push(this._get_random_digits());
      }
      if (idx === insertion_idx_1) {
        R.push(this._get_random_digits());
      }
    }
    return R.join(separator);
  };

  if (module.parent == null) {
    for (idx = _i = 0; _i <= 10; idx = ++_i) {
      console.log(this.get_passphrase());
    }
    for (n = _j = 1; _j <= 10; n = ++_j) {
      bits = (Math.log(Math.pow(words.length + 1000, n + 2))) / Math.log(2);
      console.log("entropy for " + n + " words is " + bits + "bits");
    }
  }

}).call(this);
