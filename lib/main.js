// Generated by CoffeeScript 1.7.1
(function() {
  var RANDOM, bits, digits, glob, idx, last_word_idx, log, n, njs_fs, njs_path, route, words, _i, _j;

  njs_fs = require('fs');

  njs_path = require('path');


  /* https://github.com/isaacs/node-glob */

  glob = require('glob');


  /* TAINT make route an option */

  route = njs_path.join(__dirname, '../data/**/*.words.txt');


  /* https://github.com/ckknight/random-js */

  RANDOM = require('random-js');


  /* TAINT make digits an option */

  digits = '0123456789';

  last_word_idx = null;

  words = [];

  this._get_random_integer = function(min, max) {
    var engine;
    engine = RANDOM.engines.nativeMath;
    return (RANDOM.integer(min, max))(engine);
  };

  this._get_random_digits = function(max) {
    var idx;
    return ((function() {
      var _i, _results;
      _results = [];
      for (idx = _i = 0; _i < 3; idx = ++_i) {
        _results.push(digits[this._get_random_integer(0, 9)]);
      }
      return _results;
    }).call(this)).join('');
  };

  this.get_passphrase = function(length, separator) {
    var R, idx, insertion_idx_0, insertion_idx_1, seen_words, word, _i;
    if (length == null) {
      length = 3;
    }
    if (separator == null) {
      separator = '-';
    }
    R = [];
    seen_words = {};
    insertion_idx_0 = this._get_random_integer(0, length - 1);
    while (true) {
      insertion_idx_1 = this._get_random_integer(0, length - 1);
      if (insertion_idx_1 !== insertion_idx_0) {
        break;
      }
    }
    for (idx = _i = 0; 0 <= length ? _i < length : _i > length; idx = 0 <= length ? ++_i : --_i) {
      while (true) {
        word = words[this._get_random_integer(0, last_word_idx)];
        if (seen_words[word] != null) {
          continue;
        }
        seen_words[word] = 1;
        break;
      }
      R.push(word);
      if (idx === insertion_idx_0) {
        R.push(this._get_random_digits());
      }
      if (idx === insertion_idx_1) {
        R.push(this._get_random_digits());
      }
    }
    return R.join(separator);
  };

  this._read_vocabulary = function() {
    var raw_words, routes, seen_words, word, _i, _j, _len, _len1;
    routes = glob.sync(route);
    if (!(routes.length > 0)) {
      throw new Error("unable to find vocabulary files for route " + route);
    }
    seen_words = {};
    for (_i = 0, _len = routes.length; _i < _len; _i++) {
      route = routes[_i];
      raw_words = (njs_fs.readFileSync(route, {
        encoding: 'utf-8'
      })).split('\n');
      raw_words = (function() {
        var _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = raw_words.length; _j < _len1; _j++) {
          word = raw_words[_j];
          _results.push(word.trim().toLowerCase());
        }
        return _results;
      })();
      raw_words = (function() {
        var _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = raw_words.length; _j < _len1; _j++) {
          word = raw_words[_j];
          if (word[0] !== '#') {
            _results.push(word);
          }
        }
        return _results;
      })();
      raw_words = (function() {
        var _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = raw_words.length; _j < _len1; _j++) {
          word = raw_words[_j];
          if (word.length > 0) {
            _results.push(word);
          }
        }
        return _results;
      })();
      raw_words = (function() {
        var _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = raw_words.length; _j < _len1; _j++) {
          word = raw_words[_j];
          if (word.length <= 7) {
            _results.push(word);
          }
        }
        return _results;
      })();
      for (_j = 0, _len1 = raw_words.length; _j < _len1; _j++) {
        word = raw_words[_j];
        seen_words[word] = 1;
      }
    }
    for (word in seen_words) {
      words.push(word);
    }
    last_word_idx = words.length - 1;
    return null;
  };

  this._read_vocabulary();

  if (module.parent == null) {
    log = console.log;
    log();
    for (idx = _i = 0; _i <= 10; idx = ++_i) {
      log(this.get_passphrase());
    }
    log();
    for (n = _j = 1; _j <= 10; n = ++_j) {
      bits = (Math.log(Math.pow(words.length + 1000, n + 2))) / Math.log(2);
      log("entropy for " + n + " / " + words.length + " words is " + bits + "bits");
    }
  }

}).call(this);
